type Query {
  rider(email: String!): Rider @isAuthorized
}

type Mutation {
  loginRider(email: String!, password: String!): LoginResult

  createRider(
    email: String!,
    name: String!,
    password: String!,
    phoneNumber: String!
  ): Rider

  driverCall(    
    origin: TripPlaceInput!,
    destination: TripPlaceInput!,
    startTime: String!,
    estimatedTime: String!,
    estimatedDistance: String!
  ): String @isAuthorized
  
  notifyRiderState(tripId: ID!, latitude: Float!, longitude: Float!): Boolean @isAuthorized
}

type Subscription {
  driverResponded: DriverResponse

  matchedRiderState(tripId: ID!): RiderState
}

type Rider {
  id: ID!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
}

input PositionInput {
  latitude: Float!
  longitude: Float!
}

type RiderState {
  tripId: ID!
  latitude: Float!
  longitude: Float!
}

type DriverResponse{
  driverId: ID!
  tripId: ID!
  response: String!
}

type Position {
  latitude: Float!
  longitude: Float!
}


