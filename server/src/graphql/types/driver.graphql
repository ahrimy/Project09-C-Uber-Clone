type Driver {
  id: ID!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
  carType: String!
  plateNumber: String!
  description: String
  profileImage: String
}

type LoginResult {
  success: Boolean!
  message: String
  name: String
  role: String!
  token: String
}

type driverCall  {
  riderId: String
  origin: String
  destination: String
}

type driverStateNotify {
  operationId: String
  driverId: String
  riderId: String
  driverPosition: String
  isDrop: Boolean
}

type Query {
  driver(email: String!): Driver
}

type Mutation {
  createDriver(
    email: String!,
    name: String!,
    password: String!,
    phoneNumber: String!,
    carType: String!,
    plateNumber: String!,
    description: String,
    profileImage: String
  ): Driver
  
  loginDriver(
    email: String!,
    password: String!
  ): LoginResult
  
  driverCall(
    riderId: String,
    origin: String,
    destination: String
  ): driverCall
  
  driverStateNotify(
    operationId: String
    driverId: String
    riderId: String
    driverPosition: String
    isDrop: Boolean
  ): driverStateNotify
}

type Subscription {
  driverListen: driverCall
  matchedDriverState: driverStateNotify
}
