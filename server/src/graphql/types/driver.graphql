type Driver {
  id: ID!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
  carType: String!
  plateNumber: String!
  description: String
  profileImage: String
}

type LoginResult {
  success: Boolean!
  message: String
  name: String
  role: String!
  token: String
}

input PositionInput {
  latitude: Float
  longitude: Float
}
type Position {
  latitude: Float
  longitude: Float
}
type driverCall  {
  driverIds: [ID]
  riderId: ID
  origin: Position
  destination: Position
}

type Query {
  driver(email: String!): Driver
}
type Mutation {
  createDriver(
    email: String!,
    name: String!,
    password: String!,
    phoneNumber: String!,
    carType: String!,
    plateNumber: String!,
    description: String,
    profileImage: String
  ): Driver
  loginDriver(email: String!, password: String!): LoginResult
  driverCall(driverIds: [String], riderId: String, origin: PositionInput, destination: PositionInput): driverCall
}

type Subscription {
  driverListen: driverCall
}
